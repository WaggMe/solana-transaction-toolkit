# Workflow to build and deploy Next.js static export to GitHub Pages
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"] # Or your default branch name

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Detect package manager (using Bun)
      - name: Detect package manager
        id: detect-package-manager
        run: echo "manager=bun" >> $GITHUB_OUTPUT

      # Setup Node.js (needed by Next.js build process even if using Bun)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use Node 20 LTS
          # cache: ${{ steps.detect-package-manager.outputs.manager }} # Cache doesn't work well with Bun yet

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        # No with: version needed, uses latest by default

      # Restore cache is not consistently working with Bun in actions yet
      # - name: Restore cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       .next/cache
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**.[jt]s?', '**.[jt]sx?') }}
      #     restore-keys: |
      #       ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} install

      - name: Set App Version Env Var
        run: |
          BASE_VERSION=$(jq -r .version package.json)
          echo "NEXT_PUBLIC_APP_VERSION=${BASE_VERSION}.build.${{ github.run_number }}" >> $GITHUB_ENV
          echo "App Version set to: ${BASE_VERSION}.build.${{ github.run_number }}"
        shell: bash # Ensure bash is used for jq

      - name: Build with Next.js
        env:
          GITHUB_ACTIONS: 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out # Next.js export directory

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 